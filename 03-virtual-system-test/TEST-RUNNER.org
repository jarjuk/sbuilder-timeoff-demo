* Test Runner Components 					  :TOC_3_org:
- [[Test Runner Overview][Test Runner Overview]]
- [[Test Runner Components][Test Runner Components]]
  - [[RSpec Framework][RSpec Framework]]
  - [[Iterate Test Cases][Iterate Test Cases]]
    - [[Test Case Input Directory and Interface to Test][Test Case Input Directory and Interface to Test]]
    - [[Iterate Test Case =iterateApiTraceSteps=][Iterate Test Case =iterateApiTraceSteps=]]
  - [[Map from Formal Model to Implementation][Map from Formal Model to Implementation]]
    - [[Map Data Values from Formal Model to Implementation][Map Data Values from Formal Model to Implementation]]
    - [[Map Schema from Formal Model to Implementation][Map Schema from Formal Model to Implementation]]
  - [[Action =:before TestCase=][Action =:before TestCase=]]
  - [[Action =:request Api=][Action =:request Api=]]
  - [[Action =:response API=][Action =:response API=]]
  - [[Action =:after TestCase=][Action =:after TestCase=]]
  - [[System Adaptors][System Adaptors]]
    - [[Read system state =readDatabase=][Read system state =readDatabase=]]
    - [[Check system state =checkDatabase=][Check system state =checkDatabase=]]
- [[Test Runner Implementation][Test Runner Implementation]]

* Test Runner Overview

#+BEGIN_SRC  plantuml :noweb yes :file pics/test-runner-class-diagram.jpg :eval no-export :exports results

    skinparam defaultTextAlignment center
    right footer Virtual Test Runner\n\n

    class "Test Runner" as TestRunner << RSpec >>


    class "Iterate Test Cases" as Iterator {
       ReadArchiveFile.iterateApiTraceSteps()
    }
    class ":before TestCase" as beforeTestCase << action >> {
        open_database()
	initSystem()
	checkSystem('beforeState')
        appStart()
    }
    class ":request API" as apiCall << action >> {
        callApi()
    }
    class ":response API"  as apiReturn << action >> {
        checkApiReturn()
    }
    class ":after TestCase" as afterTestCase << action >> {
	checkSystem('afterState')
	appStop()
	close_database()
    }
    class "Schema Mapper" as mapper {
      formalX2implementationX() : map data values
      schemaX() : schema transformations
    }

    class "System Adaptor" as adaptor {

         readDatabase()  : read system state
	 checkDatabase() : check system state

    }

    TestRunner - adaptor
    TestRunner *-- Iterator
    Iterator *-- beforeTestCase
    Iterator *-- apiCall
    Iterator *-- apiReturn
    Iterator *-- afterTestCase

    afterTestCase -- mapper
    ' afterTestCase -- adaptor

    apiCall -- mapper
    ' apiCall -- adaptor

    apiReturn -- mapper
    ' apiReturn -- adaptor

    beforeTestCase -- mapper
    ' beforeTestCase -- adaptor


#+END_SRC

#+RESULTS:
[[file:pics/test-runner-class-diagram.jpg]]


* Test Runner Components

** RSpec Framework

Test runner uses [[http://rspec.info/][RSpec]] framework with tests wrapped with in
=describe=  block starting with

#+name: rspec-start
#+BEGIN_SRC ruby :eval no
require_relative "../spec_helper"
describe "virtual-system-tests" do

#+END_SRC

and ending with

#+name: rspec-end
#+BEGIN_SRC ruby :eval no
end # virtual system tests

#+END_SRC


** Iterate Test Cases
   :PROPERTIES:
   :CUSTOM_ID: ITERATE
   :END:

*** Test Case Input Directory and Interface to Test

Define directrory, where to read API Trace steps, and the the
=interface= to test:


 #+name: testCase-def
 #+BEGIN_SRC ruby  :eval no
fixtureDir = VIRTUAL_SYSTEM_TEST_INPUT_DIRECTORY
interface = "TimeoffRegisterCompany"

 #+END_SRC


*** Iterate Test Case =iterateApiTraceSteps=

API =ReadArchiveFile.iterateApiTraceSteps= in [[https://github.com/jarjuk/tla-trace-arch][tla-trace-arch]] GEM
iterates API trace steps using a Ruby block starting with

 #+name: testCase-start
 #+BEGIN_SRC ruby :eval no
Sbuilder::TlaTraceArch::ReadArchiveFile.iterateApiTraceSteps( fixtureDir, interface  ) do |sha1, apiTraceStep|
    
   # String identifying test case step
   testDescription = "Step #{apiTraceStep["00-step"]["step"]} - interface #{apiTraceStep["00-step"]["interface"]} SHA1=#{apiTraceStep["00-step"]["sha1"]}"

 #+END_SRC

and ending with

 #+name: testCase-end
 #+BEGIN_SRC ruby :eval no
end # iterateTestCases
 #+END_SRC


** Map from Formal Model to Implementation
   :PROPERTIES:
   :CUSTOM_ID: MAPPERS
   :END:

*** Map Data Values from Formal Model to Implementation
    :PROPERTIES:
    :CUSTOM_ID: VALUE-MAPPER
    :END:

Lambda functions to transform data values from formal model data space
to implementation data space:

*TODO:* mapping should use formal model domain information

 #+name: hash-former-lambdas
 #+BEGIN_SRC ruby :eval

# Map 'formalEmail' to 'implementationEmail'
formalEmail2implementationEmail = ->(formalEmail) do
  # add domain '@test.com' to make formal model 
  # email to valid email in implementation
  "#{formalEmail || "noemail"}@test.com"
end


# Map 'formalLastName' to 'implementationLastName'
formalLastName2implementationLastName = ->(formalLastName) do
   # just prefix 
  "lastt-#{formalLastName}"
end

 #+END_SRC


*** Map Schema from Formal Model to Implementation
    :PROPERTIES:
    :CUSTOM_ID: SCHEMA-MAPPER
    :END:

Schema transformations use [[https://github.com/deseretbook/hashformer][hashformer]] GEM, [[https://blog.mikebourgeous.com/2016/11/22/hashformer-transform-data-in-ruby/][a Ruby Hash-based DSL]], for
transforming data from formal model space to implementation space

 #+name: hash-former-schemas
 #+BEGIN_SRC ruby :eval no

# Schema transform formal model entity 'User' 
schemaUser = {
  "name" => HF["user_name"],
  "lastname" => HF["user_name"].__as{ |x| formalLastName2implementationLastName[x] },        
  "email" =>  HF["user_email"].__as{ |x| formalEmail2implementationEmail[x] },
}

# Schema transform formal model entity 'Company'
schemaCompany = {
  "name" => HF["company_name"],
}

# Schema transform formal model 'beforeState' & 'afterState'
schemaModelState =  {
  Users: HF[:Timeoff_Users].to_a.map{ |u| HF.transform( u, schemaUser) },
  Companies: HF[:Timeoff_Companies].to_a.map{ |u| HF.transform( u, schemaCompany) },
} # schemaModelState


# Schema transform formal model 'apiInput'
schemaApiInput = {
  "name" => HF["user_name"],
  "lastname" => HF["user_name"].__as{ |x| formalLastName2implementationLastName[x] },    
  "email" => HF["user_email"].__as{ |x| formalEmail2implementationEmail[x] },
}


# Schema transform formal 'apiResponse'
schemaStatus = {
  "success" => HF["status"].__as{ |stat| stat == "status_200" },
}




 #+END_SRC


** Action =:before TestCase=
   :PROPERTIES:
   :CUSTOM_ID: ACTION-BEFORE
   :END:

#+name: before-testCase
#+BEGIN_SRC ruby :eval no
support_test_progress "------------------------------------------------------------------"
support_test_progress "#{testDescription}"

# Db 
open_database( dbFile )

# Init system 
delete_table( "Users")
delete_table( "Sessions")
delete_table( "Companies")

# check systems
support_test_progress "    Check beforeState"          
checkDatabase( 
 asIs: readDatabase, 
 toBe: map_transform( comment: "beforeState>",  
 data: apiTraceStep["01-inp"], xSchema: schemaModelState ) )

# app
support_test_progress "    Start application"
appStart


#+END_SRC



** Action =:request Api=
   :PROPERTIES:
   :CUSTOM_ID: ACTION-REQUEST
   :END:

#+name: call-api
#+BEGIN_SRC ruby :eval no
support_test_progress "   Make API call"

# navigate to regitration form
ui_navigate_main_page
ui_choose_register

# fill registration
ui_register_form_fill( 
   map_transform( 
        comment: "api_input", 
        data: apiTraceStep["02-api"], 
        xSchema: schemaApiInput))

# submit registation = API call
ui_register_form_submig
#+END_SRC


** Action =:response API=
   :PROPERTIES:
   :CUSTOM_ID: ACTION-RESPONSE
   :END:

#+name: check-api-return
#+BEGIN_SRC ruby :eval no

# Check return status from API
support_test_progress "    Check API response"
if ( map_transform( 
        comment: "api_return", 
        data: apiTraceStep["03-ret"], 
        xSchema: schemaStatus )["success"] ) then
  support_test_progress "        Check API response - expect success"
  expect( page ).to have_content( "Registration is complete.")
else
  support_test_progress "        Check API response - expect failure"
end


#+END_SRC


** Action =:after TestCase= 
   :PROPERTIES:
   :CUSTOM_ID: ACTION-AFTER
   :END:

#+name: after-testCase
#+BEGIN_SRC ruby :eval no

# Shutdown server
support_test_progress "   Stop application"
appStop

# run checks before closing database
support_test_progress "    Check afterState"
checkDatabase( 
   asIs: readDatabase, 
   toBe: map_transform( 
             comment: "afterStateToBe>",  
             data: apiTraceStep["04-out"], 
             xSchema: schemaModelState ))

#
close_database

#+END_SRC



** System Adaptors

*** Read system state =readDatabase=

 #+name: read-implementation-state
 #+BEGIN_SRC ruby :eval no
  def readDatabase
    {
      Users: select_from_table( "Users", getTableSchema( "Users")),
      Companies: select_from_table( "Companies", getTableSchema( "Companies")),
    }
  end

 #+END_SRC


*** Check system state =checkDatabase=

 #+name: check-state
 #+BEGIN_SRC ruby :eval no
# Expect 'asIs' to include 'toBe'
def checkDatabase( asIs:, toBe: )
  
  chk_db_table_included(
    comment: "db-Users>",
    toBe: toBe[:Users], asIs: asIs[:Users],
    keyLambda:  ->(r1,r2) { r1["email"] == r2["email"] }
  )
  
  chk_db_table_included(
    comment: "db-Companies>",
    toBe: toBe[:Companies], asIs: asIs[:Companies],
    keyLambda:  ->(r1,r2) { r1["name"] == r2["name"] }
  )

end
  

 #+END_SRC



* Test Runner Implementation

For the implementation refer to [[https://github.com/jarjuk/sbuilder-timeoff-demo/blob/master/03-virtual-system-test/spec/virtual-system-test/test-runner.rb][code]] in GitHub repo.


** Code								   :noexport:

#+BEGIN_SRC ruby :eval no :noweb yes :tangle spec/virtual-system-test/test-runner.rb

# NOTICE:  Code tangled from 'TEST-RUNNER.org' - and changes
# in this file will be overridden.

require 'hashformer'

<<rspec-start>>

  # Define test cases
  <<testCase-def>> 

  # Define mapping from formal model state to implementation state
  <<hash-former-lambdas>>
  <<hash-former-schemas>> 

  <<read-implementation-state>>

  <<check-state>>

  # Iterate step for 'interface' in APItrace files in 'fixtureDir'
  <<testCase-start>>

    
    describe testDescription, :type => :feature do
      
      describe "Init database and start server" do
        
        before :context, "Db init" do

	  <<before-testCase>>
          
        end
        
        # Shutdown background process 'APP_START'
        after :context  do
	   <<after-testCase>>
        end # after

        # expect server to be running
        it "expect - app #{APP_START} running" do
          expect( isAppRunning ).to eql true
        end
        
        describe "API-call" do
          before :context do
            <<call-api>>
	    <<check-api-return>>
          end

          it { expect( true ).to eql true } 
        end

      end # describe "Db" do
      
    end
  <<testCase-end>>
  
<<rspec-end>>

#+END_SRC





# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
